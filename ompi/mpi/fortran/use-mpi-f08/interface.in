# Copyright (c) 2023      Triad National Security, LLC. All rights
#                         reserved.
#
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# $HEADER$
#
# This file contains a list of prototypes to be used by 'generate_bindings.py'
# to generate Fortran subroutines and internal C functions that wrap the C MPI
# interface versions of each function.
#
# Parameters of the form 'TYPE param_name[key=other_param_name]' allow for
# dependencies between different parameters (this is useful for buffer
# parameters).
.recv(BUFFER_OUT buf[count=count;type=datatype;comm=comm], COUNT count,
      DATATYPE datatype, RANK source, TAG tag, COMM comm, STATUS status)
.irecv(BUFFER_ASYNC_OUT buf[count=count;type=datatype;comm=comm], COUNT count,
       DATATYPE datatype, RANK source, TAG tag, COMM comm, REQUEST request)
.send(BUFFER buf[count=count;type=datatype;comm=comm], COUNT count,
      DATATYPE datatype, RANK dest, TAG tag, COMM comm)
.isend(BUFFER_ASYNC buf[count=count;type=datatype;comm=comm], COUNT count,
       DATATYPE datatype, RANK dest, TAG tag, COMM comm, REQUEST request)
.waitall(SHORTCUT_COUNT count, REQUEST_ARRAY array_of_requests[count=count],
         STATUS_ARRAY array_of_statuses[count=count])
.testany(SHORTCUT_COUNT count, REQUEST_ARRAY array_of_requests[count=count],
         INDEX_OUT index, LOGICAL_OUT flag, STATUS status)
.alltoall(BUFFER sendbuf[count=sendcount;type=sendtype;comm=comm],
          INT sendcount, DATATYPE sendtype,
          BUFFER recvbuf[count=recvcount;type=recvtype;comm=comm],
          INT recvcount, DATATYPE recvtype, COMM comm)
.alltoallv(VBUFFER sendbuf[count=sendcounts;displs=sdispls;type=sendtype;comm=comm],
           INT_ARRAY sendcounts[comm=comm], INT_ARRAY sdispls[comm=comm],
           DATATYPE sendtype, VBUFFER_OUT recvbuf,
           INT_ARRAY recvcounts[comm=comm], INT_ARRAY rdispls[comm=comm],
           DATATYPE recvtype, COMM comm)
